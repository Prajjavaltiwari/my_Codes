public class linkList {
    Node head;            //head is an instance variable of the linkList class i.e. starting point of LL
    private int size;

    linkList(){
        this.size = 0;
    }
    class Node {             //it's a Node class
        String data;              // for data
        Node next;              //  1st part store the data/ 2nd "next" reference(point) address of the 2nd Node
         Node(String data){
            this.data=data;
            this.next=null;
            size++;
        }           /* The constructor of the Node class is responsible for initializing the data attribute and setting the next
                    attribute to null. Initially, when a node is created, it doesn't point to any other node, so next is set to null*/
    }

    public void addFirst(String data){
        Node newNode=new Node(data);            //This line creates a new node (newNode) with the given data
                                                //head = newNode; -If the list is empty, it sets the head to the new node (newNode) ,This means the new node becomes the first node in the list.
        if (head==null){                        // (if (head == null)) is not met (meaning the list is not empty)
            head=newNode;
            return;
        }

        newNode.next=head;                /* -It sets the next attribute of the new node to point to the current head of the list. */
        head=newNode;                     /*  This effectively adds the new node at the beginning of the list, */
    }
    public void addLast(String data){
        Node newNode=new Node(data);
        if (head==null){
            head=newNode;
            return;
        }
        Node currNode=head;                 // It initializes a temporary reference currNode to the current head of the list. This allows us to traverse the list to find the last node.
        while (currNode.next!=null){
            currNode=currNode.next;
        }
        currNode.next=newNode;            //it sets the next attribute of the last node (currNode) to point to the new node (newNode)
    }

    public void deleteFirst(){
        if (head==null){
            System.out.println("List is empty ");
            return;
        }
        size--;
        head=head.next;
    }
    //delete last
    public void deleteLast(){
        if (head==null){
            System.out.println("List is empty ");
            return;
        }
        size--;
        if (head.next ==null){          //case when list have single element
            head=null;
            return;
        }
        // traverse karne ke liye new node(secondLast)
        Node secondLast = head;
        Node lastNode =head.next;
        while (lastNode.next != null){
            lastNode = lastNode.next;
            secondLast =secondLast.next;
        }
        secondLast.next = null;
    }
    public void printList(){
        if (head==null){
            System.out.println("LinkList is Empty ");
            return;
        }
        Node currNode=head;
        while (currNode !=null){
            System.out.print(currNode.data+"--> ");
            currNode=currNode.next;
        }
        System.out.println("Null");
    }
    private int getSize() {
      return size;
    }

    public static void main(String[] args) {
        linkList list=new linkList();
        list.addFirst("is");
        list.addFirst("This");
        list.addLast("a");
        list.addLast("Linkedlist");
        list.deleteFirst();
        list.deleteLast();
        System.out.println(list.getSize());
        list.printList();
    }

}
